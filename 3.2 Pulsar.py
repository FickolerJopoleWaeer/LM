import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score


# -------- Пульсары --------

'''
Имена переменных:
Profile_mean - среднее значение
Profile_stdev - стандартное отклонение
Profile_skewness - Коэффициент асимметрии
Profile_kurtosis - Коэффициент эксцесса
DM_mean
DM_stdev
DM_skewness
DM_kurtosis
class           -   (Target)

Пульсар (pulsating star) — источник импульсного излучения с регулярным интервалом 
между последовательными импульсами, являющийся сильно намагниченной вращающейся 
компактной звездой, испускающей пучки электромагнитного излучения из своих магнитных полюсов.

DM - Мера дисперсии
Profile - Полуширина среднего профиля

Асимметрия характеризует меру скошенности графика влево / вправо, а эксцесс – меру его высоты.

Целевая переменная *class* - два возможных класса: 0 - отсутствие пульсара, 1 - его наличие.

'''
# 9. Классификация на наборе данных HTRU2
'''
# Загрузим датасет HTRU2 (файл "HTRU_2.csv" должен находиться в рабочей директории!!!)
htru_data = pd.read_csv("HTRU_2.csv")
#print("Размерность данных:", htru_data.shape)
#print("Верхние 5 строк:\n", htru_data.head())   # если не указано значение head(), выводит 5 по умолчанию
#print("Пропущенные значения:\n", htru_data.isna().sum())

[ Вывод ]

Размерность данных: (17897, 9)
Верхние 5 строк:
     140.5625  55.68378214  -0.234571412  -0.699648398  ...  19.11042633  7.975531794  74.24222492  0
0  102.507812    58.882430      0.465318     -0.515088  ...    14.860146    10.576487   127.393580  0        
1  103.015625    39.341649      0.323328      1.051164  ...    21.744669     7.735822    63.171909  0        
2  136.750000    57.178449     -0.068415     -0.636238  ...    20.959280     6.896499    53.593661  0        
3   88.726562    40.672225      0.600866      1.123492  ...    11.468720    14.269573   252.567306  0        
4   93.570312    46.698114      0.531905      0.416721  ...    14.545074    10.621748   131.394004  0        
Пропущенные значения:
140.5625        0
55.68378214     0
-0.234571412    0
-0.699648398    0
3.199832776     0
19.11042633     0
7.975531794     0
74.24222492     0
0               0
dtype: int64
'''
# Задаем имена столбцов вручную, поскольку в файле их нет
column_names = [
    "Profile_mean", "Profile_stdev", "Profile_skewness", "Profile_kurtosis",
    "DM_mean", "DM_stdev", "DM_skewness", "DM_kurtosis", "class"
]
# Читаем CSV-файл без заголовка, но с указанными именами столбцов. ***Файл "HTRU_2.csv" должен находиться в рабочей директории!***
htru_data = pd.read_csv("HTRU_2.csv", header=None, names=column_names)
#print("Размерность данных:", htru_data.shape)
#print("Верхние 5 строк:\n", htru_data.head())   # если не указано значение head(), выводит 5 по умолчанию
#print("Пропущенные значения:\n", htru_data.isna().sum())
'''
[ Вывод ]

Размерность данных: (17898, 9)
Верхние 5 строк:
    Profile_mean  Profile_stdev  Profile_skewness  Profile_kurtosis   DM_mean   DM_stdev  DM_skewness  DM_kurtosis  class
0    140.562500      55.683782         -0.234571         -0.699648  3.199833  19.110426     7.975532    74.242225      0 
1    102.507812      58.882430          0.465318         -0.515088  1.677258  14.860146    10.576487   127.393580      0 
2    103.015625      39.341649          0.323328          1.051164  3.121237  21.744669     7.735822    63.171909      0 
3    136.750000      57.178449         -0.068415         -0.636238  3.642977  20.959280     6.896499    53.593661      0 
4     88.726562      40.672225          0.600866          1.123492  1.178930  11.468720    14.269573   252.567306      0 
Пропущенные значения:
Profile_mean        0
Profile_stdev       0
Profile_skewness    0
Profile_kurtosis    0
DM_mean             0
DM_stdev            0
DM_skewness         0
DM_kurtosis         0
class               0
'''

# Визуальное исследование данных с использованием pairplot
'''
# Попытка №1
sns.pairplot(htru_data, hue="class", height=1.5, aspect=1.2)    # aspect - соотношение сторон, height - высота графика каждого. Пришлось уменьшать, т.к. не влезают. По итогу слишком мелко
plt.title("Pairplot for HTRU2 Dataset")
plt.show()
'''
'''
# Попытка №2 (Сохранние - успешно, хоть и долго)
pairplot_fig = sns.pairplot(htru_data, hue="class", height=4, aspect=1.2)
pairplot_fig.savefig("pairplot.png", dpi=300)    # файл можно увидеть в директории
print('End')
'''
'''
# Попытка №3 (Разбиение на группы)
# Группа 1: переменные профиля
cols_profile = ["Profile_mean", "Profile_stdev", "Profile_skewness", "Profile_kurtosis", "class"]
sns.pairplot(htru_data[cols_profile], hue="class", height=4)
plt.title("Pairplot for Profile Variables")
plt.show()
# Группа 2: переменные DM
cols_dm = ["DM_mean", "DM_stdev", "DM_skewness", "DM_kurtosis", "class"]
sns.pairplot(htru_data[cols_dm], hue="class", height=4)
plt.title("Pairplot for DM Variables")
plt.show()
'''

# Разделим данные на признаки и целевую переменную
X_htru = htru_data.drop("class", axis=1)
y_htru = htru_data["class"]

# Разделим данные на обучающую и тестовую выборки
X_htru_train, X_htru_test, y_htru_train, y_htru_test = train_test_split(X_htru, y_htru, test_size=0.2, random_state=50)

# Обучим классификатор (Random Forest) для HTRU2
rf_htru = RandomForestClassifier(n_estimators=100, random_state=50)
rf_htru.fit(X_htru_train, y_htru_train)
y_htru_pred = rf_htru.predict(X_htru_test)
acc_htru = accuracy_score(y_htru_test, y_htru_pred)
print("Точность случайного леса:", round(acc_htru, 3))
#print("Другие показатели:\n", classification_report(y_htru_test, y_htru_pred))
'''
[ Вывод ]

Точность случайного леса: 0.98

Помимо точности стоит также проверить показатели: precision, recall и F1-score

Другие показатели:
               precision    recall  f1-score   support

           0       0.99      0.99      0.99      3263 
           1       0.92      0.85      0.89       317 

    accuracy                           0.98      3580 
   macro avg       0.95      0.92      0.94      3580 
weighted avg       0.98      0.98      0.98      3580

Достигнутая точность 98% выглядит приемлемо, но для набора данных этого показателя может быть недостаточно.

Особенности набора данных:
Набор HTRU2 содержит 17898 наблюдений с 8 числовыми признаками 
(среднее, стандартное отклонение, асимметрия, эксцесс сигналов) 
и бинарной целевой переменной. Классы существенно несбалансированы: 
большинство примеров относятся к отрицательному классу (0), 
а положительный класс (1) представлен гораздо реже. 
Это означает, что высокая общая точность может скрывать проблемы с обнаружением меньшинства (присутствие пульсара).

Метрики качества:
Из отчёта видно, что для класса 1:
precision составляет 0.92, 
recall – 0.85, что приводит к:
F1-score 0.89. 

* Точность (recall) определяет долю истинно положительных прогнозов 
среди всех положительных прогнозов, оценивая способность модели 
избегать ложных срабатываний. 

* Recall рассчитывает долю истинных положительных результатов 
среди всех реальных положительных результатов, 
оценивая способность модели обнаруживать все экземпляры класса.

* F1 Score - это среднее гармоническое от precision и recall, 
обеспечивающее сбалансированную оценку эффективности модели 
с учетом как ложноположительных, так и ложноотрицательных результатов.

Глубокое погружение в метрики производительности:
https://docs.ultralytics.com/ru/guides/yolo-performance-metrics/#introduction

Это означает, что модель пропускает около 15% истинных положительных примеров, 
что может быть критично, если ошибка обнаружения имеет высокую цену.

Итог:
Хотя 98% точность и свидетельствует о высоком уровне работы модели, 
для подобной задачи, где важно не пропустить редкие, но критически важные случаи 
(истинные сигналы пульсаров), следует уделить внимание именно метрикам 
recall и F1-score. 
Если потеря 15% положительных примеров недопустима, 
модель требует дальнейшей настройки или использования методов балансировки классов.
'''